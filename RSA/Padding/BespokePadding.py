"""
Chạy code Python sau để nhận dữ liệu từ server

#!/usr/bin/env python3

import telnetlib
import json

HOST = "socket.cryptohack.org"
PORT = 13386

tn = telnetlib.Telnet(HOST, PORT)


def readline():
    return tn.read_until(b"\n")

def json_recv():
    line = readline()
    return json.loads(line.decode())

def json_send(hsh):
    request = json.dumps(hsh).encode()
    tn.write(request)


print(readline())

data = {
    'option': 'get_flag'
}
for i in range(2):
  json_send(data)
  recv = json_recv()
  print(recv['encrypted_flag'])
  print(recv['modulus'])
  print(recv['padding'])
  
>b"Come back as much as you want! You'll never get my flag.\n"

#encFlag1
>14561797703279741021128312964266390168322731534515142979390733823178803152747613133250454584090338015798966071449654243576112466644459256456764332422785038751494416624631472941863224359992161469754992070743272967373381479085834733506085637961530081988442329784465306059234044505733560057040138633699995080177537782361793881787288352776455090096802211976845258289117549711800645315733428207081184397647618083281982986357400872398780221167745450902962994645994033395997848790679680458444253306194725712406519519096235726212523910123380694124720810193042487487641378153855201185606611889412529903957292981191327691655453
#modulus
>14953816324825894262838073147706695027994234664072756346108484700200193973099631287093306912966883112602111560231395056529449313405432769579818394007536913197057740519822935546028651689100042047631319097867475016749229149910179090366866613181250348231495439391811163604506353008064603776087493921932018718187542600831311282818436086753704332401876945550890317874716471374028298183654622526490030113786672352796093422906330374439482300536062404873255764434616235518088210058670859244182632986628074059144106220374683210281129338466609613248435601011977012351580374016928121019200198032484175352949487882815874722091391
#padding[0][]
>[4508161253387884020869089964240501920863861409379649578197630092264896722659245124322828916166831578661378826727523563927364001188441567660800696987652068919484232690299364906194207152369997866818509046306808821609531029813795292918026092124692343277561831449421037357221089189404754213240850406300296957696213154257691166525747249724765825852089028193420698095020295433891891898180981422112079435645704240530193229628688081496215384099979033399740261709348436218301177101309768883345817438221053809230350790191620919001982491012903029666362264935141513134213235978023735566019390112421130051322080805651378585482079, 7814085401242133212709568729363197804850763702452903384011052077330032115605718461179471802545929825774032052233970909119614956878565282031868992326563953478062854879403893165252247395227032000608918965765881786836326052109230953194145120268477847826125690028548062857966176395800857760742284682341346019445100733858398761387427971446230855703389647052699121682360210283711401493883388468603666447795680288112867794769614586305144475050346148581837825148940414298512140410861777888858461502040468928088970751131457541515894576470697804073773564788354421735532348828927892069668700889717216442290600936138200816057424]
#encFlag2
>8380894658854603739738792899693856102477834590631818487430793904420303899272960662095862413992978487892764843157333787590017528420662682277618944441070602633559163409808018632002981361262434009811913115519287372904186483653481600837686007792724046588768079088322321002791129592109118319357782377584488295017324695937165649026479627452207534832450087985647356836655836254622102118233293197280880558951233223415452391366411288940228779426627320305017092893544210007170126021661883699174940721144539581325570456354307334421460955045814084667767131333393582933736807656122553958637030465327307456672009563231374710169948
#modulus
>14953816324825894262838073147706695027994234664072756346108484700200193973099631287093306912966883112602111560231395056529449313405432769579818394007536913197057740519822935546028651689100042047631319097867475016749229149910179090366866613181250348231495439391811163604506353008064603776087493921932018718187542600831311282818436086753704332401876945550890317874716471374028298183654622526490030113786672352796093422906330374439482300536062404873255764434616235518088210058670859244182632986628074059144106220374683210281129338466609613248435601011977012351580374016928121019200198032484175352949487882815874722091391
#padding[1][]
>[3247974115852125730647516723679404291576199225062068770259413672361763163862019601429083196354213840579119028895994805023702011231485871599350255803611996519509487745658940973906390885838789705498229945616946002899703019454611675323445534893925046770853432918403264828591113460874194767867670439812854071712026214332349549561250192738884527249479092959673275643525526499071392459408778221885501928536079939120168725707644361171402980769998105705474983436045174902115091893658848529701178162392965059694220107774319448206141532507229152924910531577152480664461340168335245924471770501643133321612792922451518303945329, 8318702149932524739397527584336971884935430615151289876230770470739324087937099628459012274169030652696084603072715757916704420911495449819191863735606142881262349490362426310687873461880040084478954042315291978846355298769808599554386571686411347576015923618850452286235141853775103214690523467281931137183925638982332469735476128230394601177933708705456150910801789352309256481787849176442779852234149812037442576661761418041275129232718791674438991472053333313256936901357287319634210649281575252258449059076230580177945816873076674915638389643912893800414683519583679395748280650662507497045559442538263955475093]
"""
"""
Chạy code Sage sau để nhận flag bưới dạng long

def gcd(a, b):
    while b:
        a, b = b, a % b    
    return a.monic()

padding = []
encFlag1 = 14561797703279741021128312964266390168322731534515142979390733823178803152747613133250454584090338015798966071449654243576112466644459256456764332422785038751494416624631472941863224359992161469754992070743272967373381479085834733506085637961530081988442329784465306059234044505733560057040138633699995080177537782361793881787288352776455090096802211976845258289117549711800645315733428207081184397647618083281982986357400872398780221167745450902962994645994033395997848790679680458444253306194725712406519519096235726212523910123380694124720810193042487487641378153855201185606611889412529903957292981191327691655453
modulus = 14953816324825894262838073147706695027994234664072756346108484700200193973099631287093306912966883112602111560231395056529449313405432769579818394007536913197057740519822935546028651689100042047631319097867475016749229149910179090366866613181250348231495439391811163604506353008064603776087493921932018718187542600831311282818436086753704332401876945550890317874716471374028298183654622526490030113786672352796093422906330374439482300536062404873255764434616235518088210058670859244182632986628074059144106220374683210281129338466609613248435601011977012351580374016928121019200198032484175352949487882815874722091391
padding.append([4508161253387884020869089964240501920863861409379649578197630092264896722659245124322828916166831578661378826727523563927364001188441567660800696987652068919484232690299364906194207152369997866818509046306808821609531029813795292918026092124692343277561831449421037357221089189404754213240850406300296957696213154257691166525747249724765825852089028193420698095020295433891891898180981422112079435645704240530193229628688081496215384099979033399740261709348436218301177101309768883345817438221053809230350790191620919001982491012903029666362264935141513134213235978023735566019390112421130051322080805651378585482079, 7814085401242133212709568729363197804850763702452903384011052077330032115605718461179471802545929825774032052233970909119614956878565282031868992326563953478062854879403893165252247395227032000608918965765881786836326052109230953194145120268477847826125690028548062857966176395800857760742284682341346019445100733858398761387427971446230855703389647052699121682360210283711401493883388468603666447795680288112867794769614586305144475050346148581837825148940414298512140410861777888858461502040468928088970751131457541515894576470697804073773564788354421735532348828927892069668700889717216442290600936138200816057424])
encFlag2 = 8380894658854603739738792899693856102477834590631818487430793904420303899272960662095862413992978487892764843157333787590017528420662682277618944441070602633559163409808018632002981361262434009811913115519287372904186483653481600837686007792724046588768079088322321002791129592109118319357782377584488295017324695937165649026479627452207534832450087985647356836655836254622102118233293197280880558951233223415452391366411288940228779426627320305017092893544210007170126021661883699174940721144539581325570456354307334421460955045814084667767131333393582933736807656122553958637030465327307456672009563231374710169948
padding.append([3247974115852125730647516723679404291576199225062068770259413672361763163862019601429083196354213840579119028895994805023702011231485871599350255803611996519509487745658940973906390885838789705498229945616946002899703019454611675323445534893925046770853432918403264828591113460874194767867670439812854071712026214332349549561250192738884527249479092959673275643525526499071392459408778221885501928536079939120168725707644361171402980769998105705474983436045174902115091893658848529701178162392965059694220107774319448206141532507229152924910531577152480664461340168335245924471770501643133321612792922451518303945329, 8318702149932524739397527584336971884935430615151289876230770470739324087937099628459012274169030652696084603072715757916704420911495449819191863735606142881262349490362426310687873461880040084478954042315291978846355298769808599554386571686411347576015923618850452286235141853775103214690523467281931137183925638982332469735476128230394601177933708705456150910801789352309256481787849176442779852234149812037442576661761418041275129232718791674438991472053333313256936901357287319634210649281575252258449059076230580177945816873076674915638389643912893800414683519583679395748280650662507497045559442538263955475093])
e = 11

P.<x> = PolynomialRing(Zmod(modulus))
p1 = (padding[0][0] * x + padding[0][1]) ^ e - encFlag1
p2 = (padding[1][0] * x + padding[1][1]) ^ e - encFlag2
result = -gcd(p1, p2).coefficients()[0]
print(result)
> 754659823705280937426684693543545157731789888997963325308215810880829655843345426301
"""
from Crypto.Util.number import long_to_bytes
print(long_to_bytes(754659823705280937426684693543545157731789888997963325308215810880829655843345426301))
