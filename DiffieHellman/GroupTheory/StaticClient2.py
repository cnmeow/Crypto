"""
Chạy code sau để nhận dữ liệu từ server
from sympy.ntheory.residue_ntheory import discrete_log
from Crypto.Util.Padding import unpad
from json import loads, dumps
from Crypto.Cipher import AES
from hashlib import sha1
import telnetlib
import json

HOST = "socket.cryptohack.org"
PORT = 13378

tn = telnetlib.Telnet(HOST, PORT)

def decrypt_flag(shared_secret, iv, ciphertext):
    key = sha1(str(shared_secret).encode()).digest()[:16]
    ciphertext = bytes.fromhex(ciphertext)
    iv = bytes.fromhex(iv)
    plaintext = AES.new(key, AES.MODE_CBC, iv).decrypt(ciphertext)
    return unpad(plaintext, 16).decode()

def readline():
    return tn.read_until(b"\n")

def json_recv():
    line = readline()
    return json.loads(line.decode())

def json_send(hsh):
    request = json.dumps(hsh).encode()
    tn.write(request)

print(readline())
print(readline())
print(readline())
print(tn.read_until(b':'))
smooth_p = 0x72b20ce22e5616f923901a946b02b2ad0417882d9172d88c1940fec763b0cdf02ca5862cfa70e47fb8fd10615bf61187cd564a017355802212a526453e1fb9791014f070d77f8ff4dd54a6d1d58969293734e0b6bc22f3ceea788aa33be35eed4bdc1c8ceb94084399d98e13e69a2b9fa6c5583836a15798ba1a10edd81160a15662cdf587df6b816c570f9b11a466d1b4c328180f614e964f3a5ec61c3f2b759b21687a122f9faefc86fe69a3efd14829639596eb7f2de6eab6b444d06233d34d0651e6fed17db4d0025e58db7cad8824c3e93ed24df588a0a4530be2676e995f870172b9e765ec2886bce140000000000000000000000000000000000000000000000000000000000000000000000000000001
data = {"p": hex(smooth_p), "g": "0x02", "A": "0xfe235951f232d57348a7aba4e7b6c893a9f7fff816082422c738b761c5b9d7b54eff888229f2844a384b0048d87bd8660d88c1e82d82e5d15252e93f4c9a446e7f9cb0e3a5cefa6172ef2ac021a9ec9de9e8550e9228bd04567d4f48ebb54bb344ccf73ad05c46bab0545b0df0ad6b1bdfcb715be1da2f29081568fc313654bcf2298d5b58d1dea54a5451a52d74827474a8b509418b249b620990417896528e6b372cf134d5d00163f12fd10dbc4c68132da2eaf227ad57dfbd534b03326707"}
json_send(data)
print(readline())
print(readline())

>b'Intercepted from Alice: {"p": "0xffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff", "g": "0x02", "A": "0x85f0ef1d89d18faa2364aac2baa205745873b3002c7faec1940c050a5e7059ca596a24e0372e047d2ab18f7effe8ea0b30c7438f7a817e7dd9885a8c8d9c7ccd7bca607890ec4143d16c3bf0aa977a41cb5759b9ddf2384b8d8c7f233d4e1ba8c08bf6c9e10614461263eda86782614f4049ed819f43efbe692c88dd52e7cf2f638d8d256f99afa8726dd07076e419818bd5a01d73d91044198e3333dfb3e9d62ddd6110a62781813504f23337d696bee2ce802b5ead77f4e0bb5bbd8801eb8b"}\n'
>b'Intercepted from Bob: {"B": "0xd0d69585c6586c3b1a23e04245826be6db4aed1c9bc70f7110a30165ca878d31434aa357c2bd26d3c398284a17319504e1aeead141234afeb57dfef11417fdec44b21cea83920f300f4e0c3fb573a895371b24652c5e6ea0539b7719f0f966ac7adb9a292cc49f4d8b39560e02fa82aab3c273cc7df512a80e2de6f0e8840c00554f09460eaa2e221173a9ca13182d4e1342b1e54965e16ca5fc23b1aae80aedc7fb80e1aa9be8b0274812676e8e570e1abf65eea0c49f18794a5afba975c7c7"}\n'
>b'Intercepted from Alice: {"iv": "dcc5a7cd942e5865293c1ace7e82360a", "encrypted": "923a337679ab21659b8bcf20a29a90924e629655b66f6b90c9b5eeaf8061f717655a44e4dc53bf52edfc28cc84dfb6d0"}\n'
>b'Bob connects to you, send him some parameters:'
>b' Bob says to you: {"B": "0x56c2f62b18614911dfca2942d1c5f60d84f2d95dde472190424658940f9fd7aeb5af05432b2e4db94feb69040a7d7d39700463f4e1c98903edc7740e2f72eb7beea78206c0a1cc80c7adc5de2a1599e5cfcc183a790d8ee4cb009627899341298722cc2fb9c30f7ce78fad0ed743fa227341d4085335504a26febca986e25bb8fab55d0b3396e49d4db63a52ac33f0a31b6d8a55e7902dce7b8ee66a3d338a2d62d647297adcc7fd1007bb1be74db7c7af9d6374db3f3950dad7895c2244ff40e2d1ae577740ef672b0c29d97a8175dc34a8e2a014a8e279fed464fbbd9e79109ec2aba2cefddfedfc092c0dd48e8d276da5e3b04959bf8829bc8187215cc6cc063842bc3ac69d5b62eddfc00f1fe2678c65656d"}\n'
>b'Bob says to you: {"iv": "9566877c92e1ddc2d35bc6c5198fc12e", "encrypted": "1b06424880d13e2b7ac2f7fc77dbf7b9d4bf607f2eae410e7606df118e24586dd517363b17e9eda123df13d1fcf56bd4da3dab2b5203c5604c8747831e8188ee826254e4eb844a47be4ab32c9b9f702f"}\n'
"""
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import hashlib
from Crypto.Util.number import inverse
from sympy.ntheory.residue_ntheory import discrete_log
import math

def is_pkcs7_padded(message):
    padding = message[-message[-1]:]
    return all(padding[i] == len(padding) for i in range(0, len(padding)))

def decrypt_flag(shared_secret: int, iv: str, ciphertext: str):
    # Derive AES key from shared secret
    sha1 = hashlib.sha1()
    sha1.update(str(shared_secret).encode('ascii'))
    key = sha1.digest()[:16]
    # Decrypt flag
    ciphertext = bytes.fromhex(ciphertext)
    iv = bytes.fromhex(iv)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = cipher.decrypt(ciphertext)

    if is_pkcs7_padded(plaintext):
        return unpad(plaintext, 16).decode('ascii')
    else:
        return plaintext.decode('ascii')

p = "0xffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
g = "0x02"
A = "0x85f0ef1d89d18faa2364aac2baa205745873b3002c7faec1940c050a5e7059ca596a24e0372e047d2ab18f7effe8ea0b30c7438f7a817e7dd9885a8c8d9c7ccd7bca607890ec4143d16c3bf0aa977a41cb5759b9ddf2384b8d8c7f233d4e1ba8c08bf6c9e10614461263eda86782614f4049ed819f43efbe692c88dd52e7cf2f638d8d256f99afa8726dd07076e419818bd5a01d73d91044198e3333dfb3e9d62ddd6110a62781813504f23337d696bee2ce802b5ead77f4e0bb5bbd8801eb8b"
iv = "dcc5a7cd942e5865293c1ace7e82360a"
encrypted = "923a337679ab21659b8bcf20a29a90924e629655b66f6b90c9b5eeaf8061f717655a44e4dc53bf52edfc28cc84dfb6d0"
B = "0x56c2f62b18614911dfca2942d1c5f60d84f2d95dde472190424658940f9fd7aeb5af05432b2e4db94feb69040a7d7d39700463f4e1c98903edc7740e2f72eb7beea78206c0a1cc80c7adc5de2a1599e5cfcc183a790d8ee4cb009627899341298722cc2fb9c30f7ce78fad0ed743fa227341d4085335504a26febca986e25bb8fab55d0b3396e49d4db63a52ac33f0a31b6d8a55e7902dce7b8ee66a3d338a2d62d647297adcc7fd1007bb1be74db7c7af9d6374db3f3950dad7895c2244ff40e2d1ae577740ef672b0c29d97a8175dc34a8e2a014a8e279fed464fbbd9e79109ec2aba2cefddfedfc092c0dd48e8d276da5e3b04959bf8829bc8187215cc6cc063842bc3ac69d5b62eddfc00f1fe2678c65656d"

smooth_p = 21161033472192524829557170410776298658794639108376130676557783015578090330844472167861788371083170940722591241807108382859295872641348645166391260040395583908986502774347856154314632614857393087562331369896964916313777278292965202780626304839725254323083321245935920345445760469315716688808181386083935737705284353395869520861742156127496385090743602309049820934917134755461873012945704938955132724663075880436995904093654709349552656965610546540372048421026608925808493978164019986593442564905462745669412326023291812269608558332157759989142549649265359278848084868920655698461242425344000000000000000000000000000000000000000000000000000000000000000000000000000001
B = int(B, 16)
p = int(p, 16)
g = int(g, 16)
A = int(A, 16)
b = discrete_log(smooth_p, B, 2)
shared_secret = pow(A, b, p)
print(decrypt_flag(shared_secret, iv, encrypted))
