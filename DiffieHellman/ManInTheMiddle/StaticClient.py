"""
Chạy code sau để nhận dữ liệu từ server
from sympy.ntheory.residue_ntheory import discrete_log
from Crypto.Util.Padding import unpad
from json import loads, dumps
from Crypto.Cipher import AES
from hashlib import sha1
import telnetlib
import json

HOST = "socket.cryptohack.org"
PORT = 13373

tn = telnetlib.Telnet(HOST, PORT)

def decrypt_flag(shared_secret, iv, ciphertext):
    key = sha1(str(shared_secret).encode()).digest()[:16]
    ciphertext = bytes.fromhex(ciphertext)
    iv = bytes.fromhex(iv)
    plaintext = AES.new(key, AES.MODE_CBC, iv).decrypt(ciphertext)
    return unpad(plaintext, 16).decode()

def readline():
    return tn.read_until(b"\n")

def json_recv():
    line = readline()
    return json.loads(line.decode())

def json_send(hsh):
    request = json.dumps(hsh).encode()
    tn.write(request)

print(readline())
print(readline())
print(readline())
print(tn.read_until(b':'))
smooth_p = 0x72b20ce22e5616f923901a946b02b2ad0417882d9172d88c1940fec763b0cdf02ca5862cfa70e47fb8fd10615bf61187cd564a017355802212a526453e1fb9791014f070d77f8ff4dd54a6d1d58969293734e0b6bc22f3ceea788aa33be35eed4bdc1c8ceb94084399d98e13e69a2b9fa6c5583836a15798ba1a10edd81160a15662cdf587df6b816c570f9b11a466d1b4c328180f614e964f3a5ec61c3f2b759b21687a122f9faefc86fe69a3efd14829639596eb7f2de6eab6b444d06233d34d0651e6fed17db4d0025e58db7cad8824c3e93ed24df588a0a4530be2676e995f870172b9e765ec2886bce140000000000000000000000000000000000000000000000000000000000000000000000000000001
data = {"p": hex(smooth_p), "g": "0x02", "A": "0xfe235951f232d57348a7aba4e7b6c893a9f7fff816082422c738b761c5b9d7b54eff888229f2844a384b0048d87bd8660d88c1e82d82e5d15252e93f4c9a446e7f9cb0e3a5cefa6172ef2ac021a9ec9de9e8550e9228bd04567d4f48ebb54bb344ccf73ad05c46bab0545b0df0ad6b1bdfcb715be1da2f29081568fc313654bcf2298d5b58d1dea54a5451a52d74827474a8b509418b249b620990417896528e6b372cf134d5d00163f12fd10dbc4c68132da2eaf227ad57dfbd534b03326707"}
json_send(data)
print(readline())
print(readline())

>b'Intercepted from Alice: {"p": "0xffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff", "g": "0x02", "A": "0xe756cbf9f818e2562fb19b0f305abe1f5fe7d0bb8f9168db374835d3aa0b37142145b23cbd2dbbb2b6827d77b616a18f6ae3a53c6b5e531aa1f173bc03055df5cacf06998cd86983c93f58f40f2e64012292c2f2889f60b7c1c077e3e103d91b7bb402fc4537dc5325eb12feb3ad8dafc80f28229591b1e10c2d05c0892909894ba5ba27b4df6ca37235cc6b4f3d9a5e8482bd2e91768f351889d92dcec5c16bed34808bb325daf6615dab9b74bb61c12feaf52738f449cf5ed7180a9f9bae4"}\n'
>b'Intercepted from Bob: {"B": "0x8d79b69390f639501d81bdce911ec9defb0e93d421c02958c8c8dd4e245e61ae861ef9d32aa85dfec628d4046c403199297d6e17f0c9555137b5e8555eb941e8dcfd2fe5e68eecffeb66c6b0de91eb8cf2fd0c0f3f47e0c89779276fa7138e138793020c6b8f834be20a16237900c108f23f872a5f693ca3f93c3fd5a853dfd69518eb4bab9ac2a004d3a11fb21307149e8f2e1d8e1d7c85d604aa0bee335eade60f191f74ee165cd4baa067b96385aa89cbc7722e7426522381fc94ebfa8ef0"}\n'
>b'Intercepted from Alice: {"iv": "bc057249d49acd34203f64f4a034d9b2", "encrypted": "28758a37f625e210ce6e0611d41cc3c611d39430129a8e4ad42f88fed4ceb154"}\n'
>b'Bob connects to you, send him some parameters:'
>b' Bob says to you: {"B": "0x410017fd02000042821e6ec845de545dd3c6116ff8a555b0baeeb65fdce3d03fe6b2bc77ba613ef0323f54c8d1c855e44fa6a13d840e8c9829e0f8a95cbac6a12ba6d51ff49b12d951fe53938ae3dc208af98d56296cfa6d23c695b987549b1937a586ea1bff13da2bb4028eaa75462063d42e178065de05e627e0725f64d9816ea39e20a42ba4d0782fbac9711397715f9b1bf619f45934f6438d9002093639ec5fbe860fa217ca1ec1142ab91eeaa54c24d5473c0ab980b8065b3a208c99ffa02cceac6e851d0116893b2aecfc8a144830bb76331edb389ea1e13fedb348d324f82877ac963c6ea675c24d57fe3f249a5f558358a479531b065cc99a92b150ec9c3fa32b89086c2b2b7ee23b3b127b6dbbcd14"}\n'
"""
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import hashlib
from Crypto.Util.number import inverse
from sympy.ntheory.residue_ntheory import discrete_log
import math

def is_pkcs7_padded(message):
    padding = message[-message[-1]:]
    return all(padding[i] == len(padding) for i in range(0, len(padding)))

def decrypt_flag(shared_secret: int, iv: str, ciphertext: str):
    # Derive AES key from shared secret
    sha1 = hashlib.sha1()
    sha1.update(str(shared_secret).encode('ascii'))
    key = sha1.digest()[:16]
    # Decrypt flag
    ciphertext = bytes.fromhex(ciphertext)
    iv = bytes.fromhex(iv)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = cipher.decrypt(ciphertext)

    if is_pkcs7_padded(plaintext):
        return unpad(plaintext, 16).decode('ascii')
    else:
        return plaintext.decode('ascii')

p = "0xffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
g = "0x02"
A = "0xe756cbf9f818e2562fb19b0f305abe1f5fe7d0bb8f9168db374835d3aa0b37142145b23cbd2dbbb2b6827d77b616a18f6ae3a53c6b5e531aa1f173bc03055df5cacf06998cd86983c93f58f40f2e64012292c2f2889f60b7c1c077e3e103d91b7bb402fc4537dc5325eb12feb3ad8dafc80f28229591b1e10c2d05c0892909894ba5ba27b4df6ca37235cc6b4f3d9a5e8482bd2e91768f351889d92dcec5c16bed34808bb325daf6615dab9b74bb61c12feaf52738f449cf5ed7180a9f9bae4"
iv = "bc057249d49acd34203f64f4a034d9b2"
encrypted = "28758a37f625e210ce6e0611d41cc3c611d39430129a8e4ad42f88fed4ceb154"
B = "0x410017fd02000042821e6ec845de545dd3c6116ff8a555b0baeeb65fdce3d03fe6b2bc77ba613ef0323f54c8d1c855e44fa6a13d840e8c9829e0f8a95cbac6a12ba6d51ff49b12d951fe53938ae3dc208af98d56296cfa6d23c695b987549b1937a586ea1bff13da2bb4028eaa75462063d42e178065de05e627e0725f64d9816ea39e20a42ba4d0782fbac9711397715f9b1bf619f45934f6438d9002093639ec5fbe860fa217ca1ec1142ab91eeaa54c24d5473c0ab980b8065b3a208c99ffa02cceac6e851d0116893b2aecfc8a144830bb76331edb389ea1e13fedb348d324f82877ac963c6ea675c24d57fe3f249a5f558358a479531b065cc99a92b150ec9c3fa32b89086c2b2b7ee23b3b127b6dbbcd14"
smooth_p = 21161033472192524829557170410776298658794639108376130676557783015578090330844472167861788371083170940722591241807108382859295872641348645166391260040395583908986502774347856154314632614857393087562331369896964916313777278292965202780626304839725254323083321245935920345445760469315716688808181386083935737705284353395869520861742156127496385090743602309049820934917134755461873012945704938955132724663075880436995904093654709349552656965610546540372048421026608925808493978164019986593442564905462745669412326023291812269608558332157759989142549649265359278848084868920655698461242425344000000000000000000000000000000000000000000000000000000000000000000000000000001
B = int(B, 16)
p = int(p, 16)
g = int(g, 16)
A = int(A, 16)
b = discrete_log(smooth_p, B, 2)
shared_secret = pow(A, b, p)
print(decrypt_flag(shared_secret, iv, encrypted))
